events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;

    # WAF - Basic Security Rules
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
    }

    # Block suspicious requests
    map $request_uri $blocked_uri {
        default 0;
        ~*\.(php|asp|jsp)$ 1;
        ~*\.(exe|bat|cmd)$ 1;
        ~*\.(sql|ini|conf)$ 1;
        ~*admin.*\.php$ 1;
        ~*wp-admin 1;
        ~*wp-login 1;
        ~*\.env$ 1;
        ~*\.git 1;
        ~*\.svn 1;
    }

    # Block suspicious headers
    map $http_x_forwarded_for $blocked_ip {
        default 0;
        ~*192\.168\. 1;
        ~*10\. 1;
        ~*172\.16\. 1;
    }

    # Upstream servers
    upstream frontend {
        server frontend:3000;
    }

    upstream directus {
        server directus:8055;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL Configuration (you need to provide SSL certificates)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-src 'self';" always;

        # WAF - Block malicious requests
        if ($blocked_agent) {
            return 403 "Access Denied";
        }

        if ($blocked_uri) {
            return 403 "Access Denied";
        }

        if ($blocked_ip) {
            return 403 "Access Denied";
        }

        # Block common attack patterns
        if ($request_uri ~* "(union.*select|insert.*into|delete.*from|drop.*table)") {
            return 403 "Access Denied";
        }

        if ($request_uri ~* "(<script|javascript:|vbscript:|onload=|onerror=)") {
            return 403 "Access Denied";
        }

        # Block file access attempts
        if ($request_uri ~* "\.(htaccess|htpasswd|ini|log|sh|sql|tar|gz)$") {
            return 403 "Access Denied";
        }

        # Frontend (Next.js) - Main site
        location / {
            # Rate limiting
            limit_req zone=general burst=50 nodelay;

            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Directus Admin - /admin path
        location /admin {
            # Rate limiting for admin
            limit_req zone=admin burst=10 nodelay;

            # Additional security for admin
            if ($http_referer !~* "^https?://[^/]*$") {
                return 403 "Access Denied";
            }

            proxy_pass http://directus/admin;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Directus API - /api path (for frontend proxy)
        location /api {
            # Rate limiting for API
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://directus;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # Directus Assets - /assets path
        location /assets {
            proxy_pass http://directus;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache assets for 1 year
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Directus Uploads - /uploads path
        location /uploads {
            proxy_pass http://directus;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache uploads for 1 month
            expires 1M;
            add_header Cache-Control "public";
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block access to backup files
        location ~* \.(bak|backup|old|orig|save|swp|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}
