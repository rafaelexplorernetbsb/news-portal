#!/bin/bash

# =====================================================
# SETUP COMPLETO - PORTAL DE NOT√çCIAS
# =====================================================
# Este script configura todo o ambiente do projeto
# Uso: bash setup.sh [dev|prod]
# =====================================================

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para logar mensagens
log() {
    echo -e "${BLUE}[SETUP]${NC} $1"
}

success() {
    echo -e "${GREEN}[‚úÖ SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è  WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[‚ùå ERROR]${NC} $1"
}

info() {
    echo -e "${CYAN}[‚ÑπÔ∏è  INFO]${NC} $1"
}

# Banner
echo -e "${CYAN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   PORTAL DE NOT√çCIAS                         ‚ïë
‚ïë                   Setup Autom√°tico                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar modo (dev ou prod)
MODE="${1:-dev}"
if [[ "$MODE" != "dev" && "$MODE" != "prod" ]]; then
    error "Modo inv√°lido. Use 'dev' ou 'prod'"
    exit 1
fi

log "üöÄ Iniciando setup em modo: ${MODE}"

# =====================================================
# 1. VERIFICAR DEPEND√äNCIAS
# =====================================================
log "üìã Verificando depend√™ncias..."

check_dependency() {
    if ! command -v $1 &> /dev/null; then
        error "$2 n√£o est√° instalado"
        info "Instale: $3"
        return 1
    else
        success "$2 est√° instalado"
        return 0
    fi
}

DEPENDENCIES_OK=true

check_dependency "docker" "Docker" "https://docs.docker.com/get-docker/" || DEPENDENCIES_OK=false
check_dependency "git" "Git" "https://git-scm.com/downloads" || DEPENDENCIES_OK=false

# Verificar pnpm ou npm
if command -v pnpm &> /dev/null; then
    success "pnpm est√° instalado: $(pnpm --version)"
    PKG_MANAGER="pnpm"
elif command -v npm &> /dev/null; then
    warning "pnpm n√£o encontrado, usando npm"
    info "Recomendado instalar pnpm: npm install -g pnpm"
    PKG_MANAGER="npm"
else
    error "Nenhum gerenciador de pacotes encontrado (npm/pnpm)"
    DEPENDENCIES_OK=false
fi

# Verificar Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -ge 18 ]; then
        success "Node.js est√° instalado: $(node --version)"

        # Avisar sobre Node.js 24+ e isolated-vm
        if [ "$NODE_VERSION" -ge 24 ]; then
            info "Node.js 24+ detectado. O pacote isolated-vm pode ter problemas de compila√ß√£o."
            info "Solu√ß√£o: Frontend ser√° instalado com --ignore-workspace para evitar o erro."
        fi
    else
        warning "Node.js vers√£o $NODE_VERSION detectada. Recomendado: 18+"
    fi
else
    error "Node.js n√£o est√° instalado"
    DEPENDENCIES_OK=false
fi

if [ "$DEPENDENCIES_OK" = false ]; then
    error "Depend√™ncias faltando. Por favor, instale-as e tente novamente."
    exit 1
fi

# =====================================================
# 2. VERIFICAR E INICIAR DOCKER
# =====================================================
log "üê≥ Verificando Docker..."

# Verificar Docker daemon mais robustamente
log "Verificando Docker daemon..."

if ! docker info &> /dev/null; then
    warning "Docker daemon n√£o est√° rodando. Tentando iniciar..."

    # Tentar iniciar Docker Desktop no macOS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [ -d "/Applications/Docker.app" ]; then
            log "Iniciando Docker Desktop no macOS..."
            open -a Docker
            log "Aguardando Docker iniciar (pode levar at√© 2 minutos)..."

            # Aguardar mais tempo para Docker Desktop inicializar
            max_attempts=30
            attempt=1
            while [ $attempt -le $max_attempts ]; do
                if docker info &> /dev/null; then
                    success "Docker iniciado com sucesso!"
                    break
                else
                    log "Tentativa $attempt/$max_attempts - Aguardando Docker..."
                    sleep 10
                    ((attempt++))
                fi
            done

            if ! docker info &> /dev/null; then
                error "Docker n√£o iniciou ap√≥s v√°rias tentativas"
                error "Por favor, inicie o Docker Desktop manualmente e execute o script novamente"
                error "1. Abra o Docker Desktop"
                error "2. Aguarde at√© aparecer 'Docker Desktop is running'"
                error "3. Execute o script novamente: ./setup.sh dev"
                exit 1
            fi
        else
            error "Docker Desktop n√£o encontrado em /Applications/Docker.app"
            error "Por favor, instale o Docker Desktop: https://docs.docker.com/desktop/mac/install/"
            exit 1
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        log "Tentando iniciar Docker no Linux..."
        sudo systemctl start docker || {
            error "Falha ao iniciar Docker. Execute: sudo systemctl start docker"
            exit 1
        }
        sleep 10
    else
        error "Sistema operacional n√£o suportado para inicializa√ß√£o autom√°tica do Docker"
        error "Por favor, inicie o Docker manualmente e execute o script novamente"
        exit 1
    fi
else
    success "Docker est√° rodando"
fi

# Verificar docker compose
if docker compose version &> /dev/null; then
    success "docker compose est√° dispon√≠vel"
    DOCKER_COMPOSE_CMD="docker compose"
elif docker-compose --version &> /dev/null; then
    success "docker-compose est√° dispon√≠vel"
    DOCKER_COMPOSE_CMD="docker-compose"
else
    error "Nem 'docker compose' nem 'docker-compose' est√£o dispon√≠veis"
    exit 1
fi

# =====================================================
# 3. LIMPAR PORTAS OCUPADAS
# =====================================================
log "üîå Limpando portas ocupadas..."

kill_port() {
    local port=$1
    local service=$2
    local pid=$(lsof -ti:$port 2>/dev/null || true)

    if [ -n "$pid" ]; then
        warning "Porta $port ($service) est√° em uso. Liberando..."
        kill -9 $pid 2>/dev/null || true
        sleep 2
        success "Porta $port liberada"
    else
        info "Porta $port ($service) est√° livre"
    fi
}

kill_port 3000 "Frontend"
kill_port 8055 "Directus API"
kill_port 5432 "PostgreSQL"
kill_port 6379 "Redis"

# =====================================================
# 4. CONFIGURAR ARQUIVOS .env
# =====================================================
log "‚öôÔ∏è  Configurando arquivos .env..."

# Gerar chaves aleat√≥rias para Directus
DIRECTUS_KEY=$(openssl rand -hex 32 2>/dev/null || echo "directus-secret-key-$(date +%s)")
DIRECTUS_SECRET=$(openssl rand -hex 32 2>/dev/null || echo "directus-secret-$(date +%s)")

# .env principal (usar env.example como base)
if [ ! -f ".env" ]; then
    log "Criando .env principal..."
    if [ -f "env.example" ]; then
        cp env.example .env
        # Ajustar configura√ß√µes baseadas no modo
        if [ "$MODE" = "prod" ]; then
            log "Configurando vari√°veis para produ√ß√£o..."
            sed -i.bak 's/ENV=dev/ENV=prod/' .env
            sed -i.bak 's/DIRECTUS_URL=http:\/\/localhost:8055/DIRECTUS_URL=https:\/\/meusite.com.br\/api/' .env
            sed -i.bak 's/NEXT_PUBLIC_DIRECTUS_URL=http:\/\/localhost:8055/NEXT_PUBLIC_DIRECTUS_URL=https:\/\/meusite.com.br\/api/' .env
            sed -i.bak 's/NEXT_PUBLIC_SITE_URL=http:\/\/localhost:3000/NEXT_PUBLIC_SITE_URL=https:\/\/meusite.com.br/' .env
            sed -i.bak 's/CACHE_ENABLED=false/CACHE_ENABLED=true/' .env
            sed -i.bak 's/CACHE_STORE=memory/CACHE_STORE=redis/' .env
            sed -i.bak 's/LOG_LEVEL=info/LOG_LEVEL=warn/' .env
            sed -i.bak 's/LOG_STYLE=pretty/LOG_STYLE=json/' .env
            sed -i.bak 's/RATE_LIMITER_ENABLED=false/RATE_LIMITER_ENABLED=true/' .env
            rm -f .env.bak
        fi
        success ".env criado a partir do env.example"
    else
        error "Arquivo env.example n√£o encontrado!"
        exit 1
    fi
else
    info ".env j√° existe, mantendo configura√ß√µes"
fi

# .env frontend
if [ ! -f "frontend/.env.local" ]; then
    log "Criando frontend/.env.local..."
    cat > frontend/.env.local << EOF
NEXT_PUBLIC_DIRECTUS_URL=http://localhost:8055
NEXT_PUBLIC_API_TOKEN=

# Vari√°veis para o proxy do servidor
DIRECTUS_URL=http://localhost:8055
DIRECTUS_ADMIN_EMAIL=admin@example.com
DIRECTUS_ADMIN_PASSWORD=admin123
EOF
    success "frontend/.env.local criado"
else
    info "frontend/.env.local j√° existe"
fi

# .env webscraper
if [ ! -f "webscraper-service/.env" ]; then
    log "Criando webscraper-service/.env..."
    cat > webscraper-service/.env << EOF
# Configura√ß√µes do Directus
DIRECTUS_URL=http://localhost:8055
DIRECTUS_TOKEN=

# Configura√ß√µes Gerais do Webscraper
WEBSCRAPER_INTERVAL_MINUTES=5
WEBSCRAPER_MAX_ARTICLES=5

# Configura√ß√µes Espec√≠ficas dos Portais
G1_ENABLED=true
G1_INTERVAL_MINUTES=5
G1_MAX_ARTICLES=5
G1_RSS_URL=https://g1.globo.com/rss/g1/tecnologia/
G1_CATEGORY_SLUG=tecnologia

FOLHA_ENABLED=true
FOLHA_INTERVAL_MINUTES=5
FOLHA_MAX_ARTICLES=5
FOLHA_RSS_URL=https://www1.folha.uol.com.br/tec/rss091.xml
FOLHA_CATEGORY_SLUG=tecnologia

OLHAR_DIGITAL_ENABLED=true
OLHAR_DIGITAL_INTERVAL_MINUTES=5
OLHAR_DIGITAL_MAX_ARTICLES=5
OLHAR_DIGITAL_RSS_URL=https://olhardigital.com.br/feed/
OLHAR_DIGITAL_CATEGORY_SLUG=tecnologia
EOF
    success "webscraper-service/.env criado"
else
    info "webscraper-service/.env j√° existe"
fi

# .env.prod (para produ√ß√£o)
if [ ! -f ".env.prod" ]; then
    log "Criando .env.prod..."
    cat > .env.prod << EOF
# ========================================
# CONFIGURA√á√ÉO PARA PRODU√á√ÉO
# ========================================

# Ambiente
ENV=prod
COMPOSE_PROJECT_NAME=news-portal

# Database
DIRECTUS_DB_DATABASE=directus_prod
DIRECTUS_DB_USER=directus_prod
DIRECTUS_DB_PASSWORD=senha_super_segura_aqui
POSTGRES_PORT=5432

# Redis
REDIS_PASSWORD=senha_redis_segura
REDIS_PORT=6379

# Directus
DIRECTUS_KEY=chave_super_segura_producao
DIRECTUS_SECRET=secret_super_seguro_producao
DIRECTUS_ADMIN_EMAIL=admin@seudominio.com
DIRECTUS_ADMIN_PASSWORD=senha_admin_super_segura
DIRECTUS_URL=https://api.seudominio.com
DIRECTUS_PORT=8055

# Cache (habilitado em produ√ß√£o)
CACHE_ENABLED=true
CACHE_STORE=redis
CACHE_REDIS=redis://redis:6379

# Logging (mais restritivo em produ√ß√£o)
LOG_LEVEL=warn
LOG_STYLE=json

# Frontend
NEXT_PUBLIC_DIRECTUS_URL=https://api.seudominio.com
NEXT_PUBLIC_API_TOKEN=token_estatico_producao
NEXT_PUBLIC_SITE_URL=https://seudominio.com
NEXT_PUBLIC_SITE_NAME=Portal de Not√≠cias
FRONTEND_PORT=3000

# Webscraper
WEBSCRAPER_DIRECTUS_URL=http://directus:8055
WEBSCRAPER_DIRECTUS_TOKEN=token_webscraper_producao
WEBSCRAPER_INTERVAL_MINUTES=10
WEBSCRAPER_MAX_ARTICLES=20

# Nginx
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
EOF
    success ".env.prod criado"
    warning "IMPORTANTE: Ajuste as configura√ß√µes em .env.prod antes de usar em produ√ß√£o!"
else
    info ".env.prod j√° existe"
fi

# =====================================================
# 5. COMPILAR EXTENS√ïES DO DIRECTUS
# =====================================================
log "üîß Compilando extens√µes do Directus..."

compile_extension() {
    local ext_dir=$1
    local ext_name=$2

    if [ -d "$ext_dir" ]; then
        log "Compilando extens√£o $ext_name..."
        cd "$ext_dir"

        # Verificar se package.json existe
        if [ ! -f "package.json" ]; then
            warning "package.json n√£o encontrado em $ext_dir, pulando..."
            cd - > /dev/null
            return
        fi

        # Instalar depend√™ncias se necess√°rio
        if [ ! -d "node_modules" ]; then
            log "Instalando depend√™ncias da extens√£o $ext_name..."
            if [ "$PKG_MANAGER" = "pnpm" ]; then
                pnpm install --no-frozen-lockfile --legacy-peer-deps 2>/dev/null || npm install --legacy-peer-deps 2>/dev/null || true
            else
                npm install --legacy-peer-deps 2>/dev/null || true
            fi
        fi

        # Verificar se script build existe
        if grep -q '"build"' package.json; then
            # Compilar a extens√£o
            if [ "$PKG_MANAGER" = "pnpm" ]; then
                log "Executando build com pnpm..."
                pnpm run build 2>/dev/null || npm run build 2>/dev/null || {
                    warning "Falha ao compilar $ext_name com pnpm, tentando npm..."
                    npm run build 2>/dev/null || {
                        warning "Falha ao compilar $ext_name, mas continuando..."
                    }
                }
            else
                log "Executando build com npm..."
                npm run build 2>/dev/null || {
                    warning "Falha ao compilar $ext_name, mas continuando..."
                }
            fi
        else
            warning "Script 'build' n√£o encontrado em $ext_name, pulando compila√ß√£o..."
        fi

        cd - > /dev/null

        # Verificar se compila√ß√£o foi bem-sucedida
        if [ -f "$ext_dir/dist/index.js" ]; then
            success "Extens√£o $ext_name compilada com sucesso"
        else
            warning "Extens√£o $ext_name pode n√£o ter compilado corretamente"
            info "Verifique se h√° erros de depend√™ncias ou configura√ß√£o"
        fi
    else
        info "Diret√≥rio $ext_dir n√£o encontrado, pulando..."
    fi
}

# Compilar extens√µes de notifica√ß√µes push (se existirem)
compile_extension "extensions/push-notifications" "Push Notifications Endpoint"

# Nota: Extens√µes do terminal foram removidas conforme solicitado
info "Extens√µes do terminal foram removidas do projeto"

# Verificar se todas as extens√µes foram compiladas
log "Verificando extens√µes compiladas..."
EXTENSIONS_COMPILED=0
for ext_dir in extensions/*/; do
    if [ -d "$ext_dir" ] && [ -f "$ext_dir/dist/index.js" ]; then
        EXTENSIONS_COMPILED=$((EXTENSIONS_COMPILED + 1))
        success "‚úÖ $(basename "$ext_dir") compilada"
    fi
done

if [ $EXTENSIONS_COMPILED -gt 0 ]; then
    success "$EXTENSIONS_COMPILED extens√£o(√µes) compilada(s) com sucesso"
else
    warning "Nenhuma extens√£o foi compilada. Verifique os logs acima."
fi

# =====================================================
# 6. INSTALAR DEPEND√äNCIAS
# =====================================================
log "üì¶ Instalando depend√™ncias..."

install_deps() {
    local dir=$1
    local name=$2

    if [ -d "$dir" ]; then
        log "Instalando depend√™ncias do $name..."
        cd "$dir"

        # Criar .npmrc local se n√£o existir
        if [ ! -f ".npmrc" ]; then
            cat > .npmrc << 'EOF'
engine-strict=false
legacy-peer-deps=true
auto-install-peers=true
strict-peer-dependencies=false
EOF
        fi

        if [ "$PKG_MANAGER" = "pnpm" ]; then
            # Tentar m√∫ltiplas estrat√©gias para instalar
            log "Tentando instala√ß√£o com pnpm..."

            # Estrat√©gia 1: install normal com flags
            if pnpm install --no-frozen-lockfile --shamefully-hoist 2>&1 | grep -v "WARN"; then
                success "Instala√ß√£o com pnpm bem-sucedida"
            # Estrat√©gia 2: usar npm como fallback
            elif npm install --legacy-peer-deps 2>&1 | grep -v "WARN"; then
                success "Instala√ß√£o com npm bem-sucedida (fallback)"
            # Estrat√©gia 3: for√ßar instala√ß√£o
            elif npm install --force 2>&1 | grep -v "WARN"; then
                success "Instala√ß√£o for√ßada bem-sucedida"
            else
                warning "Instala√ß√£o de $name pode ter problemas, mas continuando..."
            fi
        else
            npm install --legacy-peer-deps 2>&1 | grep -v "WARN" || \
            npm install --force 2>&1 | grep -v "WARN" || \
            warning "Instala√ß√£o de $name pode ter problemas, mas continuando..."
        fi

        cd - > /dev/null
        success "Depend√™ncias do $name processadas"
    fi
}

# Limpar caches
log "Limpando caches..."
if [ "$PKG_MANAGER" = "pnpm" ]; then
    pnpm store prune || true
else
    npm cache clean --force || true
fi

# Criar .npmrc se n√£o existir
if [ ! -f ".npmrc" ]; then
    log "Criando .npmrc..."
    cat > .npmrc << 'EOF'
engine-strict=false
legacy-peer-deps=true
auto-install-peers=true
strict-peer-dependencies=false
shamefully-hoist=true
EOF
    success ".npmrc criado"
fi

# Instalar depend√™ncias de cada projeto
# Nota: Pode haver erro com isolated-vm, mas isso n√£o afeta o funcionamento
log "Instalando depend√™ncias do projeto principal (workspace)..."

# Configurar vari√°veis de ambiente para evitar problemas com isolated-vm
export SKIP_ENGINES_CHECK=1
export SKIP_PREBUILT_BINARIES=1

if [ "$PKG_MANAGER" = "pnpm" ]; then
    log "Usando pnpm com flags para evitar problemas com isolated-vm..."
    pnpm install --no-frozen-lockfile --ignore-scripts 2>&1 | grep -v "WARN" || {
        warning "Erro na instala√ß√£o do workspace (provavelmente isolated-vm)"
        info "Tentando instala√ß√£o sem scripts..."
        pnpm install --no-frozen-lockfile --ignore-scripts --force 2>&1 | grep -v "WARN" || {
            warning "Instala√ß√£o com problemas, mas continuando..."
        }
    }
else
    npm install --legacy-peer-deps --ignore-scripts 2>&1 | grep -v "WARN" || {
        warning "Erro na instala√ß√£o do workspace"
        info "Tentando instala√ß√£o sem scripts..."
        npm install --legacy-peer-deps --ignore-scripts --force 2>&1 | grep -v "WARN" || {
            warning "Instala√ß√£o com problemas, mas continuando..."
        }
    }
fi

info "Nota: Erros com isolated-vm s√£o esperados no Node.js 24+ e n√£o afetam o funcionamento"
info "O pacote isolated-vm √© usado apenas pelo Directus para extens√µes avan√ßadas"

# Frontend - usar pnpm com --ignore-workspace para evitar problemas com isolated-vm
if [ -d "frontend" ]; then
    log "Instalando depend√™ncias do frontend com pnpm..."
    cd frontend

    # Criar .npmrc espec√≠fico para o frontend
    cat > .npmrc << 'EOF'
engine-strict=false
legacy-peer-deps=true
auto-install-peers=true
strict-peer-dependencies=false
shamefully-hoist=true
EOF

    # Instalar com pnpm usando --ignore-workspace para evitar problemas com isolated-vm
    if [ "$PKG_MANAGER" = "pnpm" ]; then
        # IMPORTANTE: --ignore-workspace evita erro de compila√ß√£o do isolated-vm (pacote do Directus)
        # que requer C++20 e pode falhar em algumas vers√µes do Node.js
        log "Usando --ignore-workspace para evitar problemas com isolated-vm..."
        pnpm install --no-frozen-lockfile --ignore-workspace --ignore-scripts 2>&1 | grep -v "WARN" || {
            warning "Erro na instala√ß√£o do frontend"
            info "Tentando instala√ß√£o for√ßada..."
            pnpm install --ignore-workspace --ignore-scripts --force 2>&1 | grep -v "WARN" || {
                warning "Instala√ß√£o do frontend com problemas, mas continuando..."
            }
        }

        # Instalar depend√™ncias de teste (Babel) se n√£o estiverem presentes
        if ! pnpm list @babel/preset-env > /dev/null 2>&1; then
            log "üîß Instalando depend√™ncias de teste (Babel)..."
            pnpm add --save-dev @babel/preset-env @babel/preset-react @babel/preset-typescript babel-jest
        fi
    else
        # Fallback para npm se pnpm n√£o estiver dispon√≠vel
        npm install --legacy-peer-deps --ignore-scripts 2>&1 | grep -v "WARN" || {
            warning "Erro na instala√ß√£o do frontend"
            info "Tentando instala√ß√£o for√ßada..."
            npm install --legacy-peer-deps --ignore-scripts --force 2>&1 | grep -v "WARN" || {
                warning "Instala√ß√£o do frontend com problemas, mas continuando..."
            }
        }

        # Instalar depend√™ncias de teste (Babel) se n√£o estiverem presentes
        if ! npm list @babel/preset-env > /dev/null 2>&1; then
            log "üîß Instalando depend√™ncias de teste (Babel)..."
            npm install --save-dev @babel/preset-env @babel/preset-react @babel/preset-typescript babel-jest
        fi
    fi

    # Instalar e configurar Cypress
    log "Configurando Cypress para testes E2E..."
    if command -v npx &> /dev/null; then
        npx cypress install --force 2>&1 | grep -v "WARN" || {
            warning "Erro ao instalar Cypress bin√°rio"
            info "Voc√™ pode instalar manualmente depois com: npx cypress install"
        }
        success "Cypress configurado"
    fi

    cd - > /dev/null
    success "Depend√™ncias do frontend processadas"
fi

install_deps "webscraper-service" "webscraper"

# Garantir que node-fetch, cheerio e dotenv estejam instalados no webscraper
cd webscraper-service
log "Verificando depend√™ncias essenciais do webscraper..."
if [ "$PKG_MANAGER" = "pnpm" ]; then
    SKIP_ENGINES_CHECK=1 pnpm add node-fetch cheerio dotenv --no-frozen-lockfile 2>/dev/null || true
else
    npm install node-fetch cheerio dotenv --save 2>/dev/null || true
fi
cd - > /dev/null

# =====================================================
# 7. PARAR CONTAINERS ANTIGOS
# =====================================================
log "üõë Parando containers antigos..."
$DOCKER_COMPOSE_CMD down -v 2>/dev/null || true
success "Containers antigos parados"

# =====================================================
# 8. INICIAR CONTAINERS DOCKER
# =====================================================
log "üê≥ Iniciando containers Docker..."

# Configurar vari√°veis de ambiente baseadas no modo
if [ "$MODE" = "prod" ]; then
    log "Configurando para produ√ß√£o..."
    export ENV=prod
    export COMPOSE_PROJECT_NAME=news-portal
    # Carregar arquivo de ambiente principal
    if [ -f ".env" ]; then
        log "Carregando configura√ß√µes do .env..."
        set -a
        source .env
        set +a
    fi
else
    log "Configurando para desenvolvimento..."
    export ENV=dev
    export COMPOSE_PROJECT_NAME=news-portal
fi

log "Usando arquivo: docker-compose.yml"
log "Modo: $MODE"
log "Ambiente: $ENV"

# Iniciar containers
if [ "$MODE" = "prod" ]; then
    log "Iniciando containers de produ√ß√£o..."
    $DOCKER_COMPOSE_CMD --profile production up -d --pull always
else
    log "Iniciando containers de desenvolvimento..."
    $DOCKER_COMPOSE_CMD up -d --pull always
fi

# Aguardar containers iniciarem
log "Aguardando containers iniciarem..."
sleep 15

# Verificar se containers est√£o rodando
if ! $DOCKER_COMPOSE_CMD ps | grep -q "Up"; then
    error "Containers n√£o iniciaram corretamente"
    log "Status dos containers:"
    $DOCKER_COMPOSE_CMD ps
    exit 1
fi

success "Containers Docker iniciados"

# =====================================================
# 9. CRIAR DIRET√ìRIOS NECESS√ÅRIOS
# =====================================================
log "üìÅ Criando diret√≥rios necess√°rios..."

mkdir -p database/migrations database/seeds 2>/dev/null || true
success "Diret√≥rios database/ criados"

# =====================================================
# 10. AGUARDAR SERVI√áOS FICAREM PRONTOS
# =====================================================
log "‚è≥ Aguardando servi√ßos ficarem prontos..."

wait_for_service() {
    local url=$1
    local name=$2
    local max_attempts=30
    local attempt=1

    log "Aguardando $name..."

    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            success "$name est√° pronto!"
            return 0
        else
            echo -n "."
            sleep 2
            ((attempt++))
        fi
    done

    echo ""
    error "$name n√£o ficou pronto ap√≥s $max_attempts tentativas"
    return 1
}

wait_for_service "http://localhost:8055/server/health" "Directus API" || {
    error "Directus API n√£o iniciou corretamente"
    log "Logs do Directus:"
    $DOCKER_COMPOSE_CMD logs directus | tail -50
    exit 1
}

# Verificar Redis separadamente
log "Verificando Redis..."
REDIS_READY=false
for i in {1..15}; do
    if docker exec news-portal_redis_dev redis-cli ping 2>/dev/null | grep -q "PONG"; then
        REDIS_READY=true
        break
    fi
    echo -n "."
    sleep 2
done
echo ""

if [ "$REDIS_READY" = true ]; then
    success "Redis est√° funcionando"
else
    warning "Redis pode n√£o estar funcionando corretamente"
    info "Verificando configura√ß√£o do Redis..."
    docker exec news-portal_redis_dev redis-cli info server 2>/dev/null || warning "Redis n√£o est√° respondendo"
fi

# =====================================================
# 11. CRIAR USU√ÅRIO ADMIN NO DIRECTUS
# =====================================================
log "üë§ Criando usu√°rio administrador..."

# Aguardar um pouco mais para garantir que o Directus est√° pronto
sleep 5

# Criar admin via CLI do Directus (mais confi√°vel)
log "Criando usu√°rio administrador via CLI..."

# Primeiro, obter o UUID correto da role Administrator
ADMIN_ROLE_UUID=$(docker exec news-portal_db_dev psql -U directus -d directus -t -c "SELECT id FROM directus_roles WHERE name = 'Administrator';" 2>/dev/null | tr -d ' \n' || echo "")

if [ -z "$ADMIN_ROLE_UUID" ]; then
    warning "N√£o foi poss√≠vel obter UUID da role Administrator"
    info "Tentando criar usu√°rio via API..."

    # Fallback: criar via API
    ADMIN_RESPONSE=$(curl -s -X POST "http://localhost:8055/users" \
      -H "Content-Type: application/json" \
      -d '{
        "email": "admin@example.com",
        "password": "admin123",
        "role": "a399502c-4ac6-4327-a9cf-6f8f40b8ada9",
        "first_name": "Admin",
        "last_name": "Sistema"
      }' 2>/dev/null || echo '{"errors":[]}')

    if echo "$ADMIN_RESPONSE" | grep -q "errors"; then
        info "Usu√°rio admin j√° existe ou erro na cria√ß√£o"
    else
        success "Usu√°rio administrador criado via API"
    fi
else
    success "UUID da role Administrator: $ADMIN_ROLE_UUID"

    # Criar usu√°rio via CLI do Directus
    CREATE_USER_RESPONSE=$(docker exec news-portal_api_dev npx directus users create \
        --email admin@example.com \
        --password admin123 \
        --role "$ADMIN_ROLE_UUID" 2>/dev/null || echo "ERROR")

    if [ "$CREATE_USER_RESPONSE" != "ERROR" ] && [ -n "$CREATE_USER_RESPONSE" ]; then
        success "Usu√°rio administrador criado via CLI (ID: $CREATE_USER_RESPONSE)"
    else
        warning "Falha ao criar usu√°rio via CLI, tentando via API..."

        # Fallback: criar via API
        ADMIN_RESPONSE=$(curl -s -X POST "http://localhost:8055/users" \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@example.com",
            "password": "admin123",
            "role": "'"$ADMIN_ROLE_UUID"'",
            "first_name": "Admin",
            "last_name": "Sistema"
          }' 2>/dev/null || echo '{"errors":[]}')

        if echo "$ADMIN_RESPONSE" | grep -q "errors"; then
            info "Usu√°rio admin j√° existe ou erro na cria√ß√£o"
        else
            success "Usu√°rio administrador criado via API"
        fi
    fi
fi

# =====================================================
# 12. EXECUTAR MIGRATIONS E SEEDS
# =====================================================
log "üóÑÔ∏è  Executando migrations e seeds..."

# Aguardar Directus estar completamente pronto
sleep 10

# Executar migrations via CLI
log "Executando migrations via CLI..."
MIGRATION_RESPONSE=$(docker exec news-portal_api_dev npx directus database migrate:latest 2>/dev/null || echo "ERROR")

if [ "$MIGRATION_RESPONSE" != "ERROR" ]; then
    success "Migrations executadas com sucesso"
else
    warning "Falha ao executar migrations via CLI, mas continuando..."
fi

# Executar seeds via CLI
log "Executando seeds via CLI..."
SEED_RESPONSE=$(docker exec news-portal_api_dev npx directus database seed 2>/dev/null || echo "ERROR")

if [ "$SEED_RESPONSE" != "ERROR" ]; then
    success "Seeds executados com sucesso"
else
    warning "Falha ao executar seeds via CLI, mas continuando..."
fi

# Criar tabela push_subscriptions para notifica√ß√µes push
log "Criando tabela push_subscriptions..."
docker exec news-portal_db_dev sh -c "PGPASSWORD=directus123 psql -h localhost -U directus_dev -d directus_dev -c \"CREATE TABLE IF NOT EXISTS push_subscriptions (id uuid PRIMARY KEY DEFAULT gen_random_uuid(), endpoint text NOT NULL UNIQUE, expiration_time timestamp, keys_p256dh text NOT NULL, keys_auth text NOT NULL, user_agent text, created_at timestamp DEFAULT CURRENT_TIMESTAMP, updated_at timestamp DEFAULT CURRENT_TIMESTAMP);\"" 2>/dev/null

if [ $? -eq 0 ]; then
    success "Tabela push_subscriptions criada com sucesso"
else
    warning "Falha ao criar tabela push_subscriptions, mas continuando..."
fi

# =====================================================
# 13. GERAR TOKEN EST√ÅTICO E ATUALIZAR .env
# =====================================================
log "üîë Gerando token est√°tico v√°lido e atualizando arquivos .env..."

# Aguardar mais um pouco para garantir que o Directus est√° pronto
sleep 5

# Tentar fazer login e obter access token
log "Fazendo login no Directus..."
LOGIN_RESPONSE=$(curl -s -X POST "http://localhost:8055/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123"
  }' 2>/dev/null || echo '{}')

ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
    warning "N√£o foi poss√≠vel fazer login. Tentando criar usu√°rio admin primeiro..."

    # Aguardar mais um pouco
    sleep 10

    # Tentar novamente
    LOGIN_RESPONSE=$(curl -s -X POST "http://localhost:8055/auth/login" \
      -H "Content-Type: application/json" \
      -d '{
        "email": "admin@example.com",
        "password": "admin123"
      }' 2>/dev/null || echo '{}')

    ACCESS_TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
fi

if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ]; then
    success "Login realizado com sucesso!"

    # Criar um token est√°tico permanente
    log "Gerando token est√°tico permanente..."

    # Buscar ID do usu√°rio admin
    USER_ID=$(curl -s -X GET "http://localhost:8055/users/me" \
      -H "Authorization: Bearer $ACCESS_TOKEN" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

    if [ -n "$USER_ID" ] && [ "$USER_ID" != "null" ]; then
        # Criar um token est√°tico que expira em 1 ano
        STATIC_TOKEN_RESPONSE=$(curl -s -X POST "http://localhost:8055/auth/login" \
          -H "Content-Type: application/json" \
          -d '{
            "email": "admin@example.com",
            "password": "admin123",
            "mode": "json"
          }' 2>/dev/null || echo '{}')

        STATIC_TOKEN=$(echo "$STATIC_TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

        # Se n√£o conseguiu, usar o access_token atual
        if [ -z "$STATIC_TOKEN" ] || [ "$STATIC_TOKEN" = "null" ]; then
            STATIC_TOKEN="$ACCESS_TOKEN"
            warning "Usando access_token tempor√°rio. Recomendado gerar token est√°tico manualmente."
        fi

        # Atualizar .env files com o token
        log "Atualizando arquivos .env com token..."

        # Atualizar .env principal
        if grep -q "NEXT_PUBLIC_API_TOKEN=" .env 2>/dev/null; then
            sed -i.bak "s|NEXT_PUBLIC_API_TOKEN=.*|NEXT_PUBLIC_API_TOKEN=$STATIC_TOKEN|" .env
        else
            echo "NEXT_PUBLIC_API_TOKEN=$STATIC_TOKEN" >> .env
        fi

        if grep -q "DIRECTUS_TOKEN=" .env 2>/dev/null; then
            sed -i.bak "s|DIRECTUS_TOKEN=.*|DIRECTUS_TOKEN=$STATIC_TOKEN|" .env
        else
            echo "DIRECTUS_TOKEN=$STATIC_TOKEN" >> .env
        fi

        # Atualizar frontend/.env.local
        if grep -q "NEXT_PUBLIC_API_TOKEN=" frontend/.env.local 2>/dev/null; then
            sed -i.bak "s|NEXT_PUBLIC_API_TOKEN=.*|NEXT_PUBLIC_API_TOKEN=$STATIC_TOKEN|" frontend/.env.local
        else
            echo "NEXT_PUBLIC_API_TOKEN=$STATIC_TOKEN" >> frontend/.env.local
        fi

        # Garantir que as vari√°veis do servidor estejam presentes no frontend/.env.local
        if ! grep -q "DIRECTUS_URL=" frontend/.env.local 2>/dev/null; then
            echo "" >> frontend/.env.local
            echo "# Vari√°veis para o proxy do servidor" >> frontend/.env.local
            echo "DIRECTUS_URL=http://localhost:8055" >> frontend/.env.local
            echo "DIRECTUS_ADMIN_EMAIL=admin@example.com" >> frontend/.env.local
            echo "DIRECTUS_ADMIN_PASSWORD=admin123" >> frontend/.env.local
        fi

        # Atualizar webscraper-service/.env
        if grep -q "DIRECTUS_TOKEN=" webscraper-service/.env 2>/dev/null; then
            sed -i.bak "s|DIRECTUS_TOKEN=.*|DIRECTUS_TOKEN=$STATIC_TOKEN|" webscraper-service/.env
        else
            echo "DIRECTUS_TOKEN=$STATIC_TOKEN" >> webscraper-service/.env
        fi

        # Remover backups
        rm -f .env.bak frontend/.env.local.bak webscraper-service/.env.bak

        success "Token configurado nos arquivos .env"
        info "Token (primeiros 20 chars): ${STATIC_TOKEN:0:20}..."

        # Salvar token completo em arquivo separado para refer√™ncia
        echo "$STATIC_TOKEN" > .directus-token
        chmod 600 .directus-token
        info "Token completo salvo em: .directus-token (use cat .directus-token para ver)"

        # =====================================================
        # 14.1. CRIAR COLLECTIONS E SCHEMA
        # =====================================================
        log "üóÑÔ∏è  Criando collections e schema do banco de dados..."

        # Fun√ß√£o para criar collection via API
        create_collection() {
            local collection_name=$1
            local display_name=$2
            local icon=$3

            log "Criando collection: $collection_name"

            # Verificar se collection j√° existe
            COLLECTION_EXISTS=$(curl -s -H "Authorization: Bearer $STATIC_TOKEN" \
                "http://localhost:8055/collections/$collection_name" 2>/dev/null | grep -o '"collection"' || echo "")

            if [ -z "$COLLECTION_EXISTS" ]; then
                # Criar collection
                curl -s -X POST "http://localhost:8055/collections" \
                    -H "Authorization: Bearer $STATIC_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "{
                        \"collection\": \"$collection_name\",
                        \"meta\": {
                            \"collection\": \"$collection_name\",
                            \"icon\": \"$icon\",
                            \"note\": \"$display_name\",
                            \"display_template\": \"{{nome}}\",
                            \"hidden\": false,
                            \"singleton\": false
                        },
                        \"schema\": {
                            \"name\": \"$collection_name\"
                        }
                    }" > /dev/null

                if [ $? -eq 0 ]; then
                    success "Collection $collection_name criada"
                else
                    error "Falha ao criar collection $collection_name"
                fi
            else
                info "Collection $collection_name j√° existe"
            fi
        }

        # Criar collections b√°sicas
        create_collection "categorias" "Categorias de not√≠cias" "category"
        create_collection "autores" "Autores das not√≠cias" "person"
        create_collection "noticias" "Not√≠cias do portal" "article"

        # =====================================================
        # 14.2. CRIAR CAMPOS DAS COLLECTIONS
        # =====================================================
        log "üå± Criando campos das collections..."

        # Fun√ß√£o para criar campo
        create_field() {
            local collection=$1
            local field_name=$2
            local field_type=$3
            local field_meta=$4

            log "Criando campo $field_name em $collection"

            curl -s -X POST "http://localhost:8055/fields/$collection" \
                -H "Authorization: Bearer $STATIC_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                    \"field\": \"$field_name\",
                    \"type\": \"$field_type\",
                    \"meta\": $field_meta,
                    \"schema\": {
                        \"name\": \"$field_name\"
                    }
                }" > /dev/null
        }

        # Aguardar collections serem criadas
        sleep 3

        # Campos para categorias
        create_field "categorias" "nome" "string" '{"interface":"input","options":{"trim":true},"display":"raw","required":true}'
        create_field "categorias" "slug" "string" '{"interface":"input","options":{"trim":true,"slug":true},"display":"raw","required":true}'
        create_field "categorias" "descricao" "text" '{"interface":"textarea","display":"raw"}'
        create_field "categorias" "icone" "uuid" '{"interface":"file-image","display":"image"}'

        # Campos para autores
        create_field "autores" "nome" "string" '{"interface":"input","options":{"trim":true},"display":"raw","required":true}'
        create_field "autores" "email" "string" '{"interface":"input","options":{"trim":true},"display":"raw"}'
        create_field "autores" "biografia" "text" '{"interface":"textarea","display":"raw"}'
        create_field "autores" "foto" "uuid" '{"interface":"file-image","display":"image"}'

        # Campos para noticias
        create_field "noticias" "titulo" "string" '{"interface":"input","options":{"trim":true},"display":"raw","required":true}'
        create_field "noticias" "slug" "string" '{"interface":"input","options":{"trim":true,"slug":true},"display":"raw","required":true}'
        create_field "noticias" "resumo" "text" '{"interface":"textarea","display":"raw"}'
        create_field "noticias" "conteudo" "text" '{"interface":"wysiwyg","display":"raw","required":true}'
        create_field "noticias" "imagem" "uuid" '{"interface":"file-image","display":"image"}'
        create_field "noticias" "url_imagem" "text" '{"interface":"input","options":{"placeholder":"https://exemplo.com/imagem.jpg"},"display":"raw","note":"URL da imagem externa"}'
        create_field "noticias" "data_publicacao" "timestamp" '{"interface":"datetime","display":"datetime","required":true}'
        create_field "noticias" "data_agendada" "dateTime" '{"interface":"datetime","display":"datetime"}'
        create_field "noticias" "destaque" "boolean" '{"interface":"boolean","display":"boolean"}'
        create_field "noticias" "status" "string" '{"interface":"select-dropdown","options":{"choices":[{"text":"Publicado","value":"published"},{"text":"Rascunho","value":"draft"},{"text":"Agendado","value":"scheduled"}]},"display":"labels","default_value":"published"}'
        create_field "noticias" "categoria" "integer" '{"interface":"select-dropdown-m2o","display":"related-values","required":true}'
        create_field "noticias" "autor" "integer" '{"interface":"select-dropdown-m2o","display":"related-values"}'
        create_field "noticias" "fonte_rss" "string" '{"interface":"input","display":"raw"}'
        create_field "noticias" "link_original" "string" '{"interface":"input","display":"raw"}'

        success "Campos criados com sucesso"

        # =====================================================
        # 14.2.5. CRIAR RELA√á√ïES M2O
        # =====================================================
        log "üîó Criando rela√ß√µes M2O..."

        # Fun√ß√£o para criar rela√ß√£o M2O
        create_m2o_relation() {
            local collection=$1
            local field=$2
            local related_collection=$3

            log "Criando rela√ß√£o M2O $field em $collection -> $related_collection"

            curl -s -X POST "http://localhost:8055/relations" \
                -H "Authorization: Bearer $STATIC_TOKEN" \
                -H "Content-Type: application/json" \
                -d "{
                    \"collection\": \"$collection\",
                    \"field\": \"$field\",
                    \"related_collection\": \"$related_collection\"
                }" > /dev/null

            if [ $? -eq 0 ]; then
                success "Rela√ß√£o M2O $field criada"
            else
                warning "Rela√ß√£o M2O $field pode j√° existir"
            fi
        }

        # Criar rela√ß√µes M2O
        create_m2o_relation "noticias" "categoria" "categorias"
        create_m2o_relation "noticias" "autor" "autores"

        success "Rela√ß√µes M2O criadas com sucesso"

        # =====================================================
        # 14.3. CRIAR DADOS INICIAIS (SEEDS)
        # =====================================================
        log "üå± Populando banco com dados iniciais..."

        # Fun√ß√£o para criar item
        create_item() {
            local collection=$1
            local data=$2

            log "Criando item em $collection"

            curl -s -X POST "http://localhost:8055/items/$collection" \
                -H "Authorization: Bearer $STATIC_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$data" > /dev/null
        }

        # Criar categorias
        create_item "categorias" '{"nome":"Tecnologia","slug":"tecnologia","descricao":"Not√≠cias sobre tecnologia e inova√ß√£o"}'
        create_item "categorias" '{"nome":"Pol√≠tica","slug":"politica","descricao":"Not√≠cias sobre pol√≠tica nacional e internacional"}'
        create_item "categorias" '{"nome":"Economia","slug":"economia","descricao":"Not√≠cias sobre economia e mercado financeiro"}'
        create_item "categorias" '{"nome":"Esportes","slug":"esportes","descricao":"Not√≠cias sobre esportes e competi√ß√µes"}'
        create_item "categorias" '{"nome":"Cultura","slug":"cultura","descricao":"Not√≠cias sobre cultura, arte e entretenimento"}'

        # Criar autor padr√£o
        create_item "autores" '{"nome":"Sistema Webscraper","email":"webscraper@example.com","biografia":"Sistema autom√°tico para coleta de not√≠cias"}'

        success "Dados iniciais criados com sucesso"

        # =====================================================
        # 14.4. APLICAR SCHEMA COMPLETO
        # =====================================================
        log "üìã Aplicando schema completo do banco de dados..."

        # Aplicar schema via API
        if [ -f "schema.yaml" ]; then
            log "Aplicando schema.yaml..."
            curl -s -X POST "http://localhost:8055/schema/apply" \
                -H "Authorization: Bearer $STATIC_TOKEN" \
                -H "Content-Type: application/json" \
                -d @schema.yaml > /dev/null 2>/dev/null || {
                warning "Falha ao aplicar schema.yaml via API, continuando..."
            }
        fi

        # Configurar campo conteudo como WYSIWYG
        log "Configurando campo conteudo como editor WYSIWYG..."
        curl -s -X PATCH "http://localhost:8055/fields/noticias/conteudo" \
            -H "Authorization: Bearer $STATIC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                "meta": {
                    "interface": "input-rich-text-html",
                    "display": "wysiwyg",
                    "options": {
                        "toolbar": [
                            "bold", "italic", "underline", "strikethrough",
                            "h1", "h2", "h3", "h4", "h5", "h6",
                            "blockquote", "code", "bulletList", "orderedList",
                            "link", "image", "table", "horizontalRule",
                            "undo", "redo", "fullscreen", "source"
                        ],
                        "placeholder": "Digite o conte√∫do da not√≠cia aqui...",
                        "defaultValue": "<p>Digite o conte√∫do da not√≠cia aqui...</p>"
                    }
                }
            }' > /dev/null 2>/dev/null || {
            warning "Falha ao configurar editor WYSIWYG, continuando..."
        }

        # Configurar campo biografia como WYSIWYG
        log "Configurando campo biografia como editor WYSIWYG..."
        curl -s -X PATCH "http://localhost:8055/fields/autores/biografia" \
            -H "Authorization: Bearer $STATIC_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                "meta": {
                    "interface": "input-rich-text-html",
                    "display": "wysiwyg",
                    "options": {
                        "toolbar": [
                            "bold", "italic", "underline", "strikethrough",
                            "h1", "h2", "h3", "h4", "h5", "h6",
                            "blockquote", "code", "bulletList", "orderedList",
                            "link", "image", "table", "horizontalRule",
                            "undo", "redo", "fullscreen", "source"
                        ],
                        "placeholder": "Digite a biografia do autor aqui...",
                        "defaultValue": "<p>Digite a biografia do autor aqui...</p>"
                    }
                }
            }' > /dev/null 2>/dev/null || {
            warning "Falha ao configurar editor WYSIWYG para biografia, continuando..."
        }

        success "Schema aplicado com sucesso"

        # =====================================================
        # 14.5. VERIFICAR E CONFIGURAR EXTENS√ïES
        # =====================================================
        log "üîß Verificando extens√µes do Directus..."

        # Verificar se extens√µes foram carregadas
        EXTENSIONS_RESPONSE=$(curl -s -H "Authorization: Bearer $STATIC_TOKEN" \
            "http://localhost:8055/extensions" 2>/dev/null || echo '{}')

        if echo "$EXTENSIONS_RESPONSE" | grep -q "push-notifications"; then
            success "Extens√£o Push Notifications carregada com sucesso"
        else
            info "Extens√£o Push Notifications n√£o foi carregada automaticamente"
            info "Reinicie o Directus para carregar as extens√µes: docker compose restart directus"
        fi

        # Nota sobre terminal removido
        info "Extens√µes do terminal foram removidas conforme solicitado"

    else
        warning "N√£o foi poss√≠vel obter ID do usu√°rio"
        info "Voc√™ precisar√° gerar um token manualmente no Directus Admin"
    fi
else
    warning "N√£o foi poss√≠vel gerar token automaticamente"
    info "Voc√™ precisar√° gerar um token manualmente no Directus Admin"
    info "1. Acesse http://localhost:8055/admin"
    info "2. Fa√ßa login com admin@example.com / admin123"
    info "3. V√° em Settings > Access Tokens > Create Token"
    info "4. Copie o token e atualize os arquivos .env"
fi

# =====================================================
# 15. INICIAR FRONTEND
# =====================================================
log "üé® Iniciando frontend..."

# Matar processos anteriores
pkill -f "next dev" 2>/dev/null || true
pkill -f "pnpm dev" 2>/dev/null || true
sleep 2

cd frontend

# Corrigir CSS que pode estar causando problemas
log "Corrigindo arquivo CSS..."
if [ -f "src/styles/content-renderer.css" ]; then
    # Verificar se o CSS tem @apply (que causa erro)
    if grep -q "@apply" src/styles/content-renderer.css; then
        log "Corrigindo CSS com @apply..."
        cat > src/styles/content-renderer.css << 'EOF'
/* Estilos para conte√∫do HTML e Markdown */
.news-content {
  font-family: 'Inter', sans-serif;
  color: #2d3748;
  line-height: 1.7;
  font-size: 18px;
}

.news-content h1,
.news-content h2,
.news-content h3,
.news-content h4,
.news-content h5,
.news-content h6 {
  font-weight: 700;
  margin-top: 1.5em;
  margin-bottom: 0.8em;
  line-height: 1.2;
  color: #1a202c;
}

.news-content h1 { font-size: 2.5em; }
.news-content h2 { font-size: 2em; }
.news-content h3 { font-size: 1.75em; }
.news-content h4 { font-size: 1.5em; }

.news-content p {
  margin-bottom: 1em;
}

.news-content a {
  color: #3182ce;
  text-decoration: underline;
}

.news-content a:hover {
  color: #2c5282;
}

.news-content ul,
.news-content ol {
  margin-left: 1.5em;
  margin-bottom: 1em;
}

.news-content ul li {
  list-style-type: disc;
}

.news-content ol li {
  list-style-type: decimal;
}

.news-content blockquote {
  border-left: 4px solid #4299e1;
  padding-left: 1em;
  margin-left: 0;
  font-style: italic;
  color: #4a5568;
  background-color: #ebf8ff;
  padding: 0.8em 1em;
  border-radius: 0 0.5rem 0.5rem 0;
  margin-bottom: 1em;
}

.news-content img {
  max-width: 100%;
  height: auto;
  display: block;
  margin: 1em auto;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.news-content pre {
  background-color: #2d3748;
  color: #e2e8f0;
  padding: 1em;
  border-radius: 0.5rem;
  overflow-x: auto;
  margin-bottom: 1em;
}

.news-content code {
  font-family: 'Fira Code', monospace;
  background-color: #edf2f7;
  color: #c53030;
  padding: 0.2em 0.4em;
  border-radius: 0.25rem;
  font-size: 0.9em;
}

.news-content pre code {
  background-color: transparent;
  color: inherit;
  padding: 0;
}

.news-content table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 1em;
}

.news-content th,
.news-content td {
  border: 1px solid #e2e8f0;
  padding: 0.8em;
  text-align: left;
}

.news-content th {
  background-color: #f7fafc;
  font-weight: 600;
}

@media (max-width: 768px) {
  .news-content {
    font-size: 16px;
  }
  .news-content h1 { font-size: 2em; }
  .news-content h2 { font-size: 1.75em; }
}
EOF
        success "CSS corrigido"
    fi
fi

# Iniciar frontend em background (usar pnpm)
if [ "$PKG_MANAGER" = "pnpm" ]; then
    log "Iniciando frontend com pnpm dev..."
    nohup pnpm dev > ../frontend.log 2>&1 &
else
    log "Iniciando frontend com npm run dev..."
    nohup npm run dev > ../frontend.log 2>&1 &
fi

FRONTEND_PID=$!
cd - > /dev/null

success "Frontend iniciado (PID: $FRONTEND_PID)"
info "Logs: tail -f frontend.log"

# Aguardar frontend iniciar e verificar
log "Aguardando frontend iniciar..."
sleep 15

# Verificar se frontend est√° respondendo
FRONTEND_READY=false
for i in {1..10}; do
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        FRONTEND_READY=true
        break
    fi
    echo -n "."
    sleep 3
done
echo ""

if [ "$FRONTEND_READY" = true ]; then
    success "Frontend est√° respondendo em http://localhost:3000"
else
    warning "Frontend pode n√£o ter iniciado corretamente"
    info "Verifique os logs: tail -f frontend.log"
    info "Ou inicie manualmente: cd frontend && pnpm dev"
fi

# =====================================================
# 16. VERIFICAR SA√öDE DOS SERVI√áOS
# =====================================================
log "üè• Verificando sa√∫de dos servi√ßos..."

check_service() {
    local url=$1
    local name=$2

    if curl -s "$url" > /dev/null 2>&1; then
        success "$name est√° funcionando"
        return 0
    else
        error "$name n√£o est√° respondendo"
        return 1
    fi
}

SERVICES_OK=true
check_service "http://localhost:8055/server/ping" "Directus API" || SERVICES_OK=false
check_service "http://localhost:3000" "Frontend" || SERVICES_OK=false

if [ "$SERVICES_OK" = false ]; then
    warning "Alguns servi√ßos n√£o est√£o respondendo, mas o setup continuou"
fi

# =====================================================
# 17. RESUMO FINAL
# =====================================================
echo ""
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   ‚úÖ SETUP COMPLETO!                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

echo -e "${CYAN}üìã INFORMA√á√ïES DO SISTEMA:${NC}"
echo ""
echo -e "${BLUE}üåê URLs de Acesso:${NC}"
echo -e "   ‚Ä¢ Frontend:      ${GREEN}http://localhost:3000${NC}"
echo -e "   ‚Ä¢ Directus Admin: ${GREEN}http://localhost:8055/admin${NC}"
echo -e "   ‚Ä¢ API:           ${GREEN}http://localhost:8055${NC}"
echo ""
echo -e "${BLUE}üîë Credenciais do Admin:${NC}"
echo -e "   ‚Ä¢ Email:    ${YELLOW}admin@example.com${NC}"
echo -e "   ‚Ä¢ Senha:    ${YELLOW}admin123${NC}"
echo ""
echo -e "${BLUE}üìä Dados Iniciais:${NC}"
echo -e "   ‚Ä¢ ‚úÖ 5 categorias criadas"
echo -e "   ‚Ä¢ ‚úÖ 1 autor padr√£o criado"
echo -e "   ‚Ä¢ ‚úÖ Schema do banco aplicado"
echo -e "   ‚Ä¢ ‚úÖ Extens√µes compiladas (terminal removido)"
echo ""
echo -e "${BLUE}üöÄ Pr√≥ximos Passos:${NC}"
echo -e "   1. Acesse ${GREEN}http://localhost:8055/admin${NC}"
echo -e "   2. Fa√ßa login com as credenciais acima"
echo -e "   3. Configure permiss√µes se necess√°rio"
echo -e "   4. Acesse o frontend em ${GREEN}http://localhost:3000${NC}"
echo ""
echo -e "${BLUE}üîß Extens√µes Dispon√≠veis:${NC}"
echo -e "   ‚Ä¢ Push Notifications: ${GREEN}extensions/push-notifications${NC}"
echo -e "   ‚Ä¢ Terminal removido conforme solicitado"
echo ""
echo -e "${BLUE}üï∑Ô∏è  Webscrapers Dispon√≠veis:${NC}"
echo -e "   ‚Ä¢ G1:            ${GREEN}webscraper-service/g1.js${NC}"
echo -e "   ‚Ä¢ Folha:         ${GREEN}webscraper-service/folha.js${NC}"
echo -e "   ‚Ä¢ Olhar Digital: ${GREEN}webscraper-service/olhar-digital.js${NC}"
echo ""
# Configurar token autom√°tico
log "Configurando sistema de token autom√°tico..."

# Tornar scripts execut√°veis
chmod +x refresh-token.sh 2>/dev/null || true
chmod +x auto-refresh-token.sh 2>/dev/null || true

# Iniciar sistema de token autom√°tico em background
if [ -f "auto-refresh-token.sh" ]; then
    log "Iniciando renova√ß√£o autom√°tica de token..."
    nohup ./auto-refresh-token.sh > token-refresh.log 2>&1 &
    success "Sistema de token autom√°tico iniciado!"
    info "Logs do token: tail -f token-refresh.log"
else
    warning "Script auto-refresh-token.sh n√£o encontrado"
fi

echo ""
echo -e "${BLUE}üí° Comandos √öteis:${NC}"
echo -e "   ‚Ä¢ Parar tudo:     ${YELLOW}./stop.sh${NC}"
echo -e "   ‚Ä¢ Ver logs:       ${YELLOW}tail -f frontend.log${NC}"
echo -e "   ‚Ä¢ Health check:   ${YELLOW}./health-check.sh${NC}"
echo -e "   ‚Ä¢ Diagn√≥stico:    ${YELLOW}./diagnose.sh${NC}"
echo -e "   ‚Ä¢ Renovar token:  ${YELLOW}./refresh-token.sh${NC}"
echo ""
echo -e "${BLUE}üß™ Testes e Qualidade:${NC}"
echo -e "   ‚Ä¢ Testes unit√°rios:  ${YELLOW}cd frontend && npm test${NC}"
echo -e "   ‚Ä¢ Testes E2E:        ${YELLOW}cd frontend && npm run test:e2e${NC}"
echo -e "   ‚Ä¢ Cobertura:         ${YELLOW}cd frontend && npm run test:coverage${NC}"
echo -e "   ‚Ä¢ Bundle analysis:   ${YELLOW}cd frontend && npm run analyze${NC}"
echo ""
echo -e "${BLUE}üìä Monitoramento (opcional):${NC}"
echo -e "   ‚Ä¢ Iniciar:        ${YELLOW}docker-compose --profile monitoring up -d${NC}"
echo -e "   ‚Ä¢ Grafana:        ${GREEN}http://localhost:3001${NC} (admin/admin123)"
echo -e "   ‚Ä¢ Prometheus:     ${GREEN}http://localhost:9090${NC}"
echo ""

# Mostrar aviso sobre Node.js se necess√°rio
if [ "$NODE_VERSION" -ge 24 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  NOTA IMPORTANTE:${NC}"
    echo -e "   Voc√™ est√° usando Node.js $NODE_VERSION. O pacote ${YELLOW}isolated-vm${NC} do Directus"
    echo -e "   pode ter erros de compila√ß√£o com esta vers√£o, mas isso ${GREEN}N√ÉO afeta${NC}"
    echo -e "   o funcionamento do sistema. O frontend foi instalado com"
    echo -e "   ${CYAN}--ignore-workspace${NC} para evitar esse problema."
    echo -e "   ${BLUE}Recomenda√ß√£o:${NC} Para evitar warnings, use Node.js LTS 20.x ou 22.x"
    echo ""
fi

echo -e "${GREEN}‚ú® Seu portal de not√≠cias est√° pronto para uso!${NC}"
echo -e "${CYAN}üîÑ Token ser√° renovado automaticamente a cada 10 minutos${NC}"
echo ""
