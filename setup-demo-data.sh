#!/bin/bash

# Script para configurar dados de demonstra√ß√£o do News Portal
# Este script importa o schema, dados de exemplo e configura o token de API

set -e

echo "üöÄ Configurando dados de demonstra√ß√£o do News Portal..."

# Verificar se o Docker Compose est√° rodando
if ! docker-compose ps | grep -q "directus-postgres-1.*Up"; then
    echo "‚ùå PostgreSQL n√£o est√° rodando. Execute 'docker-compose up -d' primeiro."
    exit 1
fi

# Verificar se o Directus est√° rodando
if ! docker-compose ps | grep -q "directus.*Up"; then
    echo "‚ùå Directus n√£o est√° rodando. Execute 'docker-compose up -d' primeiro."
    exit 1
fi

echo "üìä Importando schema do banco de dados..."
docker exec -i directus-postgres-1 psql -U postgres -d directus < database_schema.sql

echo "üìù Importando dados de demonstra√ß√£o..."
docker exec -i directus-postgres-1 psql -U postgres -d directus < demo_data.sql

echo "üîë Gerando token de API v√°lido..."
# Aguardar Directus estar pronto
sleep 10

# Gerar token de API
API_TOKEN=""
MAX_ATTEMPTS=10
ATTEMPT=1

while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
    echo "üîÑ Tentativa $ATTEMPT de $MAX_ATTEMPTS para gerar token..."
    
    # Fazer login e obter token
    RESPONSE=$(curl -s -X POST "http://localhost:8055/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"admin@example.com","password":"directus"}' \
        2>/dev/null || echo "")
    
    if [ -n "$RESPONSE" ] && echo "$RESPONSE" | grep -q "access_token"; then
        # Extrair token da resposta
        API_TOKEN=$(echo "$RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
        
        if [ -n "$API_TOKEN" ]; then
            echo "‚úÖ Token gerado com sucesso!"
            break
        fi
    fi
    
    echo "‚ùå Tentativa $ATTEMPT falhou. Aguardando..."
    sleep 10
    ATTEMPT=$((ATTEMPT + 1))
done

if [ -z "$API_TOKEN" ]; then
    echo "‚ùå N√£o foi poss√≠vel gerar token de API"
    echo "üí° Continuando sem configura√ß√£o autom√°tica do frontend..."
    echo "   Voc√™ pode gerar o token manualmente em http://localhost:8055/admin"
else
    echo "‚öôÔ∏è  Configurando frontend com token v√°lido..."
    
    # Criar arquivo .env.local no frontend
    cat > frontend/.env.local << EOF
# Configura√ß√µes do Directus
NEXT_PUBLIC_DIRECTUS_URL=http://localhost:8055
DIRECTUS_TOKEN=$API_TOKEN

# Token de API v√°lido (gerado automaticamente)
# Este token permite acesso √†s not√≠cias, autores e categorias
EOF
    
    echo "‚úÖ Frontend configurado com token v√°lido!"
fi

echo ""
echo "‚úÖ Dados de demonstra√ß√£o importados com sucesso!"
echo ""
echo "üìã O que foi importado:"
echo "   ‚Ä¢ 5 categorias (Pol√≠tica, Economia, Tecnologia, Esportes, Cultura)"
echo "   ‚Ä¢ 4 autores de exemplo"
echo "   ‚Ä¢ 10 not√≠cias de demonstra√ß√£o"
echo "   ‚Ä¢ Token de API v√°lido configurado no frontend"
echo ""
echo "üåê Acesse a aplica√ß√£o:"
echo "   ‚Ä¢ Frontend: http://localhost:3000"
echo "   ‚Ä¢ Directus CMS: http://localhost:8055"
echo ""
echo "üéâ Setup completo! Sua aplica√ß√£o est√° pronta para uso."
echo ""
echo "üí° Para executar o frontend:"
echo "   cd frontend && pnpm install && pnpm dev"
